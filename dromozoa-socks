#! /usr/bin/env lua

-- Copyright (C) 2016 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-socks.
--
-- dromozoa-socks is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-socks is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-socks.  If not, see <http://www.gnu.org/licenses/>.

local sequence = require "dromozoa.commons.sequence"
local unpack = require "dromozoa.commons.unpack"
local uint32 = require "dromozoa.commons.uint32"
local unix = require "dromozoa.unix"
local future_service = require "dromozoa.socks.future_service"

assert(unix.block_signal(unix.SIGPIPE))

local nodename, servname = ...
if nodename == "" then
  nodename = nil
end

local function socket_address_to_string(address, message, code)
  if address then
    local nodename, servname = assert(address:getnameinfo(uint32.bor(unix.NI_NUMERICHOST, unix.NI_NUMERICSERV)))
    return nodename .. ":" .. servname
  else
    if code == unix.EINVAL then
      print("connection closed?")
    end
    return "!!! " .. message .. " !!!"
  end
end

local service = future_service()

service:dispatch(function (service)
  local futures = {}
  local acceptors = {}

  for fd in assert(service:bind_tcp(nodename, servname):get()):each() do
    futures[fd:get()] = service:accept(fd)
    acceptors[fd:get()] = fd
  end

  while true do
    local key = service:when_any_table(futures):get()
    local future = futures[key]
    futures[key] = nil

    if acceptors[key] then
      local fd1, address = assert(future:get())

      futures[fd1:get()] = service:deferred(function (promise)
        local reader1 = service:make_reader(fd1)
        local writer1 = service:make_writer(fd1)

        local result, message = pcall(function ()
          local version = assert(reader1:read(1):get()):byte()
          if version == nil then
            error("connection closed")
          end
          local n = assert(reader1:read(1):get()):byte()
          local methods = sequence():push(assert(reader1:read(n):get()):byte(1, n))
          return {
            version = version;
            methods = methods;
          }
        end)

        if not result then
          return promise:set(nil, message)
        end

        local no_authn
        for method in message.methods:each() do
          if method == 0x00 then
            no_authn = true
            break
          end
        end
        if message.version == 0x05 and no_authn then
          local f = writer1:write("\5\0")
          if not f:get() then
            return promise:set(f:get())
          end
        else
          local f = writer1:write("\5\255")
          if not f:get() then
            return promise:set(f:get())
          end
          return promise:set(nil, "protocol error")
        end

        local result, message = pcall(function ()
          local version = assert(reader1:read(1):get()):byte()
          if version == nil then
            error("connection closed")
          end
          local command = assert(reader1:read(1):get()):byte()
          local reserved = assert(reader1:read(1):get()):byte()
          local atyp = assert(reader1:read(1):get()):byte()
          local dst_addr
          local dst_port
          if atyp == 0x01 then
            dst_addr = assert(reader1:read(4):get())
            dst_port = assert(reader1:read(2):get())
          elseif atyp == 0x03 then
            local n = assert(reader1:read(1):get()):byte()
            dst_addr = assert(reader1:read(n):get())
            dst_port = assert(reader1:read(2):get())
          elseif atyp == 0x04 then
            dst_addr = assert(reader1:read(16):get())
            dst_port = assert(reader1:read(2):get())
          end
          return {
            version = version;
            command = command;
            reserved = reserved;
            atyp = atyp;
            dst_addr = dst_addr;
            dst_port = dst_port;
          }
        end)

        if not result then
          return promise:set(nil, message)
        end

        local rep
        if message.version ~= 0x05 then
          rep = "\1"
        elseif message.command ~= 0x01 then
          rep = "\7"
        elseif message.reserved ~= 0x00 then
          rep = "\1"
        elseif message.dst_addr == nil or message.dst_port == nil then
          rep = "\8"
        end
        if rep then
          local f = writer1:write("\5" .. rep .. "\0\1\0\0\0\0\0\0")
          if not f:get() then
            return promise:set(f:get())
          end
          return promise:set(nil, "protocol error")
        end

        local f
        local hostname = ""
        if message.atyp == 0x01 then
          f = service:deferred(function (promise)
            local fd = unix.socket(unix.AF_INET, uint32.bor(unix.SOCK_STREAM, unix.SOCK_CLOEXEC, unix.SOCK_NONBLOCK))
            if not fd then
              return promise:set(unix.get_last_error())
            end
            local result, message, code = service:connect(fd, unix.sockaddr_in(message.dst_addr, message.dst_port)):get()
            if not result then
              fd:close()
              return promise:set(nil, message, code)
            end
            return promise:set(fd)
          end)
        elseif message.atyp == 0x03 then
          local a, b = message.dst_port:byte(1, 2)
          f = service:connect_tcp(message.dst_addr, a * 256 + b)
          hostname = " (" .. message.dst_addr .. ")"
        elseif message.atyp == 0x04 then
          f = service:deferred(function (promise)
            local fd = unix.socket(unix.AF_INET6, uint32.bor(unix.SOCK_STREAM, unix.SOCK_CLOEXEC, unix.SOCK_NONBLOCK))
            if not fd then
              return promise:set(unix.get_last_error())
            end
            local result, message, code = service:connect(fd, unix.sockaddr_in6(message.dst_addr, message.dst_port)):get()
            if not result then
              fd:close()
              return promise:set(nil, message, code)
            end
            return promise:set(fd)
          end)
        end

        local fd2, message, code = f:get()
        if not fd2 then
          if code == unix.ENETUNREACH then
            rep = "\3"
          elseif code == unix.EHOSTUNREACH then
            rep = "\4"
          elseif code == unix.ECONNREFUSED then
            rep = "\5"
          else
            rep = "\1"
          end
          local f = writer1:write("\5" .. rep .. "\0\1\0\0\0\0\0\0")
          if not f:get() then
            return promise:set(f:get())
          end
          return promise:set(nil, "protocol error")
        end

        local buffer = "\5\0\0"

        local bind_address = fd2:getsockname()
        if bind_address:family() == unix.AF_INET then
          buffer = buffer .. "\1"
        elseif bind_address:family() == unix.AF_INET6 then
          buffer = buffer .. "\4"
        end
        buffer = buffer .. bind_address:addr() .. bind_address:port()

        local f = writer1:write(buffer)
        if not f:get() then
          return promise:set(f:get())
        end

        local message = ("[%d] %s -> %s [%d] %s -> %s%s"):format(
            fd1:get(), socket_address_to_string(fd1:getpeername()), socket_address_to_string(fd1:getsockname()),
            fd2:get(), socket_address_to_string(fd2:getsockname()), socket_address_to_string(fd2:getpeername()),
            hostname)

        print("opened " .. message)

        local reader2 = service:make_reader(fd2)
        local writer2 = service:make_writer(fd2)

        local f1 = service:deferred(function (promise)
          local count = 0
          while true do
            local f = reader1:read_any(256)
            local result = f:get()
            if not result then
              return promise:set(f:get())
            elseif result == "" then
              break
            end
            local f = writer2:write(result)
            if not f:get() then
              return promise:set(f:get())
            end
            count = count + #result
          end
          if not fd2:shutdown(unix.SHUT_WR) then
            return promise:set(unix.get_last_error())
          end
          return promise:set(count)
        end)

        local f2 = service:deferred(function (promise)
          local count = 0
          while true do
            local f = reader2:read_any(256)
            local result = f:get()
            if not result then
              return promise:set(f:get())
            elseif result == "" then
              break
            end
            local f = writer1:write(result)
            if not f:get() then
              return promise:set(f:get())
            end
            count = count + #result
          end
          if not fd1:shutdown(unix.SHUT_WR) then
            return promise:set(unix.get_last_error())
          end
          return promise:set(count)
        end)

        service:when_all(f1, f2):get()
        assert(fd1:close())
        assert(fd2:close())

        print("closed " .. message)

        local reslt, message = f1:get()
        if not result then
          print(message)
        end
        local reslt, message = f2:get()
        if not result then
          print(message)
        end
        return promise:set(true)
      end)
      futures[key] = service:accept(acceptors[key])
    else
      future:get()
    end
  end
end)
