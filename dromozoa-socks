#! /usr/bin/env lua

-- Copyright (C) 2016 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-socks.
--
-- dromozoa-socks is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-socks is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-socks.  If not, see <http://www.gnu.org/licenses/>.

local sequence = require "dromozoa.commons.sequence"
local unpack = require "dromozoa.commons.unpack"
local uint32 = require "dromozoa.commons.uint32"
local unix = require "dromozoa.unix"
local future_service = require "dromozoa.socks.future_service"

assert(unix.block_signal(unix.SIGPIPE))

local nodename, servname = ...
if nodename == "" then
  nodename = nil
end

local function make_connection_string(address, message)
  if address then
    local nodename, servname = assert(address:getnameinfo(uint32.bor(unix.NI_NUMERICHOST, unix.NI_NUMERICSERV)))
    return nodename .. ":" .. servname
  else
    return "(" .. message .. ")"
  end
end

local service = future_service()

service:dispatch(function (service)
  local futures = {}
  local acceptors = {}

  for fd in assert(service:bind_tcp(nodename, servname):get()):each() do
    futures[fd:get()] = service:accept(fd)
    acceptors[fd:get()] = fd
  end

  while true do
    local key = service:when_any_table(futures):get()
    local future = futures[key]
    futures[key] = nil

    if acceptors[key] then
      local fd1, address = assert(future:get())

      futures[fd1:get()] = service:deferred(function (promise)
        local fd2
        local connection1 = ""
        local connection2 = ""

        local f = service:deferred(function (promise)
          connection1 = (" [%d] %s -> %s"):format(fd1:get(), make_connection_string(fd1:getpeername()), make_connection_string(fd1:getsockname()))
          print(("opened%s"):format(connection1))

          local reader1 = service:make_reader(fd1)
          local writer1 = service:make_writer(fd1)

          local version = promise:assert(promise:assert(reader1:read(1):get()):byte())
          if version == nil then
            promise:error("unexpected eof")
          end
          local n = promise:assert(promise:assert(reader1:read(1):get()):byte())
          local methods = sequence():push(promise:assert(reader1:read(n):get()):byte(1, n))
          local no_authn
          for method in methods:each() do
            if method == 0x00 then
              no_authn = true
            end
          end
          if version == 0x05 and no_authn then
            promise:assert(writer1:write("\5\0"):get())
          else
            promise:assert(writer1:write("\5\255"):get())
            promise:error("client error")
          end

          local version = promise:assert(promise:assert(reader1:read(1):get()):byte())
          if version == nil then
            promise:error("unexpected eof")
          end
          local command = promise:assert(promise:assert(reader1:read(1):get()):byte())
          local reserved = promise:assert(promise:assert(reader1:read(1):get()):byte())
          local atyp = promise:assert(promise:assert(reader1:read(1):get()):byte())
          local dst_addr
          local dst_port
          if atyp == 0x01 then
            dst_addr = promise:assert(reader1:read(4):get())
            dst_port = promise:assert(reader1:read(2):get())
          elseif atyp == 0x03 then
            local n = promise:assert(promise:assert(reader1:read(1):get()):byte())
            dst_addr = promise:assert(reader1:read(n):get())
            dst_port = promise:assert(reader1:read(2):get())
          elseif atyp == 0x04 then
            dst_addr = promise:assert(reader1:read(16):get())
            dst_port = promise:assert(reader1:read(2):get())
          end
          local rep
          if version ~= 0x05 or reserved ~= 0x00 then
            rep = "\1"
          elseif command ~= 0x01 then
            rep = "\7"
          elseif dst_port == nil then
            rep = "\8"
          end
          if rep then
            promise:assert(writer1:write("\5" .. rep .. "\0\1\0\0\0\0\0\0"))
            promise:error("client error")
          end

          local f
          local hostname = ""
          if atyp == 0x01 then
            f = service:deferred(function (promise)
              local fd = promise:assert(unix.socket(unix.AF_INET, uint32.bor(unix.SOCK_STREAM, unix.SOCK_CLOEXEC, unix.SOCK_NONBLOCK)))
              promise:assert(service:connect(fd, unix.sockaddr_in(dst_addr, dst_port)):get())
              return promise:set(fd)
            end)
          elseif atyp == 0x03 then
            local a, b = dst_port:byte(1, 2)
            f = service:connect_tcp(dst_addr, a * 256 + b)
            hostname = " (" .. dst_addr .. ")"
          elseif atyp == 0x04 then
            f = service:deferred(function (promise)
              local fd = promise:assert(unix.socket(unix.AF_INET6, uint32.bor(unix.SOCK_STREAM, unix.SOCK_CLOEXEC, unix.SOCK_NONBLOCK)))
              promise:assert(service:connect(fd, unix.sockaddr_in6(dst_addr, dst_port)):get())
              return promise:set(fd)
            end)
          end

          local message, code
          fd2, message, code = promise:assert(f:get())

          if not fd2 then
            local rep = "\1"
            if code == unix.ENETUNREACH then
              rep = "\3"
            elseif code == unix.EHOSTUNREACH then
              rep = "\4"
            elseif code == unix.ECONNREFUSED then
              rep = "\5"
            end
            promise:assert(writer1:write("\5" .. rep .. "\0\1\0\0\0\0\0\0"))
            promise:error(message)
          end

          local bind_address = fd2:getsockname()
          local bind_atyp
          if bind_address:family() == unix.AF_INET then
            bind_atyp = "\1"
          elseif bind_address:family() == unix.AF_INET6 then
            bind_atyp = "\4"
          else
            promise:assert(writer1:write("\5\1\0\1\0\0\0\0\0\0"))
            promise:error("server error")
          end
          promise:assert(writer1:write("\5\0\0" .. bind_atyp .. bind_address:addr() .. bind_address:port()):get())

          connection2 = (" [%d] %s -> %s%s"):format(fd2:get(), make_connection_string(fd2:getsockname()), make_connection_string(fd2:getpeername()), hostname)
          print(("opened%s%s"):format(connection1, connection2))

          local reader2 = service:make_reader(fd2)
          local writer2 = service:make_writer(fd2)

          local f1 = service:deferred(function (promise)
            local count = 0
            while true do
              local result = promise:assert(reader1:read_any(256):get())
              if result == "" then
                break
              end
              promise:assert(writer2:write(result):get())
              count = count + #result
            end
            promise:assert(fd2:shutdown(unix.SHUT_WR))
            return promise:set(count)
          end)

          local f2 = service:deferred(function (promise)
            local count = 0
            while true do
              local result = promise:assert(reader2:read_any(256):get())
              if result == "" then
                break
              end
              promise:assert(writer1:write(result):get())
              count = count + #result
            end
            promise:assert(fd1:shutdown(unix.SHUT_WR))
            return promise:set(count)
          end)

          promise:assert(service:when_all(f1, f2):get())
          return promise:set(promise:assert(f1:get()), promise:assert(f2:get()))
        end)

        print(f:get())
        print(("closed%s%s"):format(connection1, connection2))

        assert(fd1:close())
        if fd2 then
          assert(fd2:close())
        end

        return promise:set(true)
      end)
      futures[key] = service:accept(acceptors[key])
    else
      print("?", future:get())
    end
  end
end)
